// (üö®): ( Error )
/**
 * Khai b√°o ki·ªÉu d·ªØ li·ªáu trong typescript:
 *
 * JS: null, undefined, string, number, boolean, bigint, symbol, array, object
 */

let age: number = 20;
// age = "hai muoi tu·ªïi"; (üö®)

let userName: string = "Nguyen Van A";
// userName = 10; (üö®)

let isShow: boolean = true;
isShow = false;

// isShow = 10; (üö®)

// C√°ch 1:
let listNumber: number[] = [1, 2, 3, 4];

// C√°ch 2: generic
let _listNumber: Array<number> = [1, 2, 3, 4];

// listNumber = [1, 2, 3, "dsfs"]; (üö®)
// listNumber = [1, 2, 3, false]; (üö®)
// Ch·ªâ cho ph√©p m·∫£ng ch·ª©a c√°c ph·∫ßn t·ª≠ c√≥ ki·ªÉu d·ªØ li·ªáu l√† number

// √çt d√πng ƒë·ªÉ khai b√°o nh∆∞ th·∫ø n√†y.
let abc: null = null;
// abc = 12; (üö®)
let def: undefined = undefined;
// def = 10; (üö®)

// ----------------------------------------------------
/**
 * Typescript t·ª± ng·∫ßm ƒë·ªãnh hi·ªÉu ki·ªÉu d·ªØ li·ªáu n·∫øu nh∆∞ c√°c b·∫°n kh√¥ng khai b√°o ki·ªÉu d·ªØ li·ªáu r√µ r√†ng cho n√≥.
 */

let _userName = "Nguyen Van B";
_userName = "Nguyen Van B";

let _age = 20;
// _age = "sfasdf"; (üö®)

// ----------------------------------------------------
/**
 * Ki·ªÉu d·ªØ li·ªáu c·ªßa typescript -> lowercase
 *
 * Uppercase: √©p ki·ªÉu.
 */

// String(32); // ƒëang l√†m chuy·ªán g√¨ ƒë√¢y ??? √©p ki·ªÉu d·ªØ li·ªáu
// let value = Number(event.target.value) ???
// Boolean(12);

// ----------------------------------------------------

/**
 * Union: k·∫øt h·ª£p => number | string
 * - d√πng d·∫•u "|" ƒë·ªÉ k·∫øt h·ª£p nhi·ªÅu ki·ªÉu d·ªØ li·ªáu l·∫°i v·ªõi nhau.
 */

/**
 * s·ª≠ d·ª•ng t·ª´ kh√≥a "type": ƒë·ªÉ khai b√°o ki·ªÉu d·ªØ li·ªáu ri√™ng c·ªßa m√¨nh.
 * Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu ti√™n.
 */
type StringOrNumber = string | number;

type ID = number | string | boolean | null;

// Mong mu·ªën id: ƒë·ªÅu nh·∫≠n ƒë∆∞·ª£c 2 ki·ªÉu d·ªØ li·ªáu l√† string ho·∫∑c number
let id: ID = 121312312;
id = "dfasdfasdfasdf";
id = false;

// let productId: number | string = 1212121;
// productId = "fasfasd";

// ----------------------------------------------------

/**
 * product:
 * - id: string,
 * - price: number,
 * - name: string,
 * - description: kh√¥ng b·∫Øt bu·ªôc c√≥. N·∫øu c√≥ th√¨ ph·∫£i l√† string.
 */

type TProduct = {
  id: StringOrNumber; // string | number
  price: number;
  name: string;
  description?: string; // ( Optional )
};

const product3: TProduct = {
  id: "12121",
  price: 1212,
  name: "product3",
};

const product5: TProduct = {
  id: "12121",
  price: 1212,
  name: "product5",
  description: "product5",
};

const product6: TProduct = {
  id: "12121",
  price: 1212,
  name: "product6",
  description: true, // (üö®)
};

product3.id = 12; // mong mu·ªën kh√¥ng b√°o l·ªói n·ªØa

// (üö®)
const product1: TProduct = {
  id: "12121",
  price: 1212,
};

const product2: TProduct = {
  id: "12121",
  price: 1212,
  name: 1212, // (üö®)
};

// Ng·∫ßm ƒë·ªãnh hi·ªÉu ki·ªÉu d·ªØ li·ªáu.
const product4 = {
  id: 12121,
  price: "hai muoi mot nghin dong",
  name: "I Phone 14",
};
// ------------------------------------------------

/**
 * Dog:
 * - name: Chihuahua, Poodle, Pug, Alaska, Husky ( literal type )
 * - age: number,
 * - numberOfLeg: khai b√°o s·ªë ch√¢n: 2 ch√¢n ho·∫∑c 4 ch√¢n, ( literal type )
 * - description: kh√¥ng b·∫Øt bu·ªôc, nh∆∞ng n·∫øu c√≥ th√¨ ph·∫£i l√† string,
 * - id: string ho·∫∑c number
 */

/**
 * literal type: li·ªát k√™ ra nh·ªØng gi√° tr·ªã m√† m√¨nh cho ph√©p
 */

type TDog = {
  name: "Chihuahua" | "Poodle" | "Pug" | "Alaska" | "Husky";
  age: number;
  numberOfLeg: 2 | 4;
  description?: string;
  id: StringOrNumber;
};

const dog: TDog = {
  id: 1,
  name: "Husky",
  age: 12,
  numberOfLeg: 4,
};

type TNumberOfLeg = 2 | 4;
const nol: TNumberOfLeg = 4;

const nol1: TNumberOfLeg = 6; // (üö®)

type TStatus = "active" | "inactive";
let _status: TStatus = "active"; // 'inactive'
_status = "fadsfasdfas"; // b√°o l·ªói

// ------------------------------------------------

/**
 * Type Function
 */

/**
 * @param a number
 * @param b number
 * @returns number
 */
function calcTotal(a: number, b: number): number {
  return a + b;
}

const _calcTotal = (a: number, b: number): number => {
  return a + b;
};

calcTotal(1212, 121);

calcTotal("1212", 121); // (üö®)

/**
 * @param a number
 * @param b kh√¥ng b·∫Øt bu·ªôc nh∆∞ng n·∫øu truy·ªÅn ph·∫£i l√† number, default 10
 * @returns number
 */
// typescript: n·∫øu c√≥ gi√° tr·ªã default th√¨ typescript s·∫Ω t·ª± ng·∫ßm hi·ªÉu ƒë√¢y l√† gi√° tr·ªã kh√¥ng b·∫Øt bu·ªôc
function calcTotal2(a: number, b: number = 10): number {
  return a + b;
}

calcTotal2(3242342);
calcTotal2(3242342, 34234);

calcTotal2(3242342, "34234"); // (üö®)

function calcTotal3(a: number, b: number) {
  return a + b;
}

function calcTotal4(a: number, b: number): string {
  return `${a + b}`;
}

// ----------------------------- Error ------------------------
/**
 * @param a kh√¥ng b·∫Øt bu·ªôc nh∆∞ng n·∫øu truy·ªÅn ph·∫£i l√† number, default 10
 * @param b number
 * @returns number
 *
 * Ch√∫ √Ω: n√†y kh√¥ng h·ª£p l·ªá.
 * Optional lu√¥n lu√¥n ƒë·ªÉ tham s·ªë cu·ªëi c√πng.
 */
function calcTotal5(a: number = 10, b: number): number {
  return a + b;
}

// l√†m sao b·ªè qua vi·ªác kh√¥ng truy·ªÅn tham s·ªë cho a.
// calcTotal5(, 10);
// ------------------------------------------------------------

/**
 * interface <====> type
 *
 * interface: k·∫øt h·ª£p v·ªõi class
 */

/**
 * animal:
 * - name: string,
 * - age: number,
 * - id: string | number;
 */
interface IAnimal {
  name: string;
  age: number;
  id: number | string;
}
// ------------------------------------------------------------
/**
 * K·∫øt h·ª£p nhi·ªÅu type l·∫°i v·ªõi nhau. "&" ( combine ) , k·∫øt th·ª´a.
 * D√†nh cho Object
 */

type TShape = {
  name: string;
  bgc: string;
  area: number;
  sizeX: number;
  sizeY: number;
};

type TSquare = TShape & {
  side: number;
};

type TRectangle = TShape & {
  length: number;
  width: number;
};

const square: TSquare = {
  name: "s·∫•",
  area: 12,
  bgc: "fadfa",
  sizeX: 10,
  sizeY: 10,
  side: 100,

  width: "1212", // ƒëang d∆∞
};

// ƒëang thi·∫øu
const _square: TSquare = {
  name: "s·∫•",
  area: 12,
  bgc: "fadfa",
  sizeX: 10,
  sizeY: 10,
};

// ---------------- Interface ---------------
/**
 * interface d√πng "extends" merge 2 interface l·∫°i v·ªõi nhau
 */
interface IShape {
  name: string;
  bgc: string;
  area: number;
  sizeX: number;
  sizeY: number;
}

interface ISquare extends IShape {
  side: number;
}

interface IRectangle extends IShape {
  length: number;
  width: number;
}

// -------------------------------------
/**
 * Kh√°c bi·ªát gi·ªØa type v√† interface.
 */

//[[ type ]] Kh√¥ng th·ªÉ khai b√°o tr√πng t√™n .
type TAbc = string;
type TAbc = number;

// [[ interface ]] cho ph√©p khai b√°o tr√πng t√™n
// V√† merge 2 interface l·∫°i v·ªõi nhau.
interface IAbc {
  a: string;
}

interface IAbc {
  b: number;
}

const _abc: IAbc = {
  a: "fasdfa",
  b: 10,
};
// -------------------------------------
/**
 * mong mu·ªën truy·ªÅn v√†o b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu n√†o
 */

/**
 * ki·ªÉu d·ªØ li·ªáu ƒë·∫∑c bi·ªát "any", nh·∫≠n b·∫•t k·ª≥ ki·ªÉu d·ªØ li·ªáu n√†o
 */
function log(params: any) {
  console.log(params);
}

log("fasdfas");
log(121);
log({});
log([]);

let _a: any = 10;
_a = "32423";
_a = true;

// --------------------------------------
/**
 * generic: Truy·ªÅn type cho function
 * type l√† kh√¥ng c·ªë ƒë·ªãnh.
 */

function _log<T>(params: T) {
  console.log(params);
}

_log<string>("fasdfasfd");

_log<string>(1212); // (üö®)

_log<number>(1212);

_log(true);

_log(1212);
